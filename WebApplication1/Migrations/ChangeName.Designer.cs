// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(Store))]
    [Migration("20231123221526_ChangeName")]
    partial class ChangeName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.Card", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasColumnName("cardID");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("clientID");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date")
                        .HasColumnName("creationDate");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(4, 1)")
                        .HasColumnName("discountRate");

                    b.Property<decimal>("TotalAmountPurchase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("totalAmountPurchase")
                        .HasDefaultValueSql("((0.0))");

                    b.HasKey("CardId");

                    b.HasIndex("ClientId");

                    b.ToTable("Card", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Catagory", b =>
                {
                    b.Property<int>("CatagoryId")
                        .HasColumnType("int")
                        .HasColumnName("catagoryID");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3, 1)")
                        .HasColumnName("discount")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("CatagoryId");

                    b.ToTable("Catagory", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Check", b =>
                {
                    b.Property<int>("CheckId")
                        .HasColumnType("int")
                        .HasColumnName("checkID");

                    b.Property<int?>("CardId")
                        .HasColumnType("int")
                        .HasColumnName("cardID");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("dateTime");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffID");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("money")
                        .HasColumnName("totalAmount");

                    b.HasKey("CheckId");

                    b.HasIndex("CardId");

                    b.HasIndex("StaffId");

                    b.ToTable("Check", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.CheckProduct", b =>
                {
                    b.Property<int>("CheckProductId")
                        .HasColumnType("int")
                        .HasColumnName("CheckProductID");

                    b.Property<int>("CheckId")
                        .HasColumnType("int")
                        .HasColumnName("checkID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productID");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("quantity");

                    b.HasKey("CheckProductId");

                    b.HasIndex("CheckId");

                    b.HasIndex("ProductId");

                    b.ToTable("CheckProduct", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("clientID");

                    b.Property<int>("ContactInformationId")
                        .HasColumnType("int")
                        .HasColumnName("contactInformationID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("ClientId");

                    b.HasIndex("ContactInformationId");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.ClientCardService", b =>
                {
                    b.Property<int>("ClientCardServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ClientCardServiceID");

                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasColumnName("cardID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("serviceID");

                    b.HasKey("ClientCardServiceId");

                    b.HasIndex("CardId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ClientCardService", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.ClientProduct", b =>
                {
                    b.Property<int>("ClientProductId")
                        .HasColumnType("int")
                        .HasColumnName("ClientProductID");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("clientID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productID");

                    b.HasKey("ClientProductId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProductId");

                    b.ToTable("ClientProduct", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.ClientService", b =>
                {
                    b.Property<int>("ClientServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ClientServiceID");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("clientID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("serviceID");

                    b.HasKey("ClientServiceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ClientService", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.ContactInfomation", b =>
                {
                    b.Property<int>("ContactInformationId")
                        .HasColumnType("int")
                        .HasColumnName("contactInformationID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phoneNumber");

                    b.HasKey("ContactInformationId");

                    b.ToTable("ContactInfomation", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int")
                        .HasColumnName("enrollmentID");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("clientID");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("dateTime");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("device");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffID");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffId");

                    b.ToTable("Enrollment", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("positionID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("PositionId");

                    b.ToTable("Position", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productID");

                    b.Property<int>("CatagoryId")
                        .HasColumnType("int")
                        .HasColumnName("catagoryID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("price")
                        .IsFixedLength();

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplierID");

                    b.HasKey("ProductId");

                    b.HasIndex("CatagoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("serviceID");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<string>("Materials")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("materials");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.HasKey("ServiceId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffID");

                    b.Property<int>("ContactInformationId")
                        .HasColumnType("int")
                        .HasColumnName("contactInformationID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("positionID");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasColumnName("salary");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("specialization");

                    b.HasKey("StaffId");

                    b.HasIndex("ContactInformationId");

                    b.HasIndex("PositionId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("WebApplication1.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplierID");

                    b.Property<int>("ContactInformationId")
                        .HasColumnType("int")
                        .HasColumnName("contactInformationID");

                    b.Property<string>("Name1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("SupplierId");

                    b.HasIndex("ContactInformationId");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.SupplierProduct", b =>
                {
                    b.Property<int>("SupplierProductId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierProductID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productID");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplierID");

                    b.HasKey("SupplierProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierProduct", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Card", b =>
                {
                    b.HasOne("WebApplication1.Models.Client", "Customer")
                        .WithMany("Cards")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_Card_Client");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebApplication1.Models.Check", b =>
                {
                    b.HasOne("WebApplication1.Models.Card", "Card")
                        .WithMany("Checks")
                        .HasForeignKey("CardId")
                        .HasConstraintName("FK_Check_Card");

                    b.HasOne("WebApplication1.Models.Staff", "Staff")
                        .WithMany("Checks")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_Check_Staff");

                    b.Navigation("Card");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("WebApplication1.Models.CheckProduct", b =>
                {
                    b.HasOne("WebApplication1.Models.Check", "Check")
                        .WithMany("CheckProducts")
                        .HasForeignKey("CheckId")
                        .IsRequired()
                        .HasConstraintName("FK_CheckProduct_Check");

                    b.HasOne("WebApplication1.Models.Product", "Product")
                        .WithMany("CheckProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_CheckProduct_Product");

                    b.Navigation("Check");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication1.Models.Client", b =>
                {
                    b.HasOne("WebApplication1.Models.ContactInfomation", "ContactInformation")
                        .WithMany("Clients")
                        .HasForeignKey("ContactInformationId")
                        .IsRequired()
                        .HasConstraintName("FK_Client_ContactInfomation");

                    b.Navigation("ContactInformation");
                });

            modelBuilder.Entity("WebApplication1.Models.ClientCardService", b =>
                {
                    b.HasOne("WebApplication1.Models.Card", "Card")
                        .WithMany("ClientCardServices")
                        .HasForeignKey("CardId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientCardService_ClientCard");

                    b.HasOne("WebApplication1.Models.Service", "Service")
                        .WithMany("ClientCardServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientCardService_Service");

                    b.Navigation("Card");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("WebApplication1.Models.ClientProduct", b =>
                {
                    b.HasOne("WebApplication1.Models.Client", "Client")
                        .WithMany("ClientProducts")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientProduct_Client");

                    b.HasOne("WebApplication1.Models.Product", "Product")
                        .WithMany("ClientProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientProduct_Product");

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication1.Models.ClientService", b =>
                {
                    b.HasOne("WebApplication1.Models.Client", "Client")
                        .WithMany("ClientServices")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientService_Client");

                    b.HasOne("WebApplication1.Models.Service", "Service")
                        .WithMany("ClientServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientService_Service");

                    b.Navigation("Client");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("WebApplication1.Models.Enrollment", b =>
                {
                    b.HasOne("WebApplication1.Models.Client", "Client")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_Enrollment_Client");

                    b.HasOne("WebApplication1.Models.Staff", "Staff")
                        .WithMany("Enrollments")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_Enrollment_Staff");

                    b.Navigation("Client");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("WebApplication1.Models.Product", b =>
                {
                    b.HasOne("WebApplication1.Models.Catagory", "Catagory")
                        .WithMany("Products")
                        .HasForeignKey("CatagoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Catagory");

                    b.HasOne("WebApplication1.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Supplier");

                    b.Navigation("Catagory");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebApplication1.Models.Staff", b =>
                {
                    b.HasOne("WebApplication1.Models.ContactInfomation", "ContactInformation")
                        .WithMany("Staff")
                        .HasForeignKey("ContactInformationId")
                        .IsRequired()
                        .HasConstraintName("FK_Staff_ContactInfomation");

                    b.HasOne("WebApplication1.Models.Position", "Position")
                        .WithMany("Staff")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("FK_Staff_Position");

                    b.Navigation("ContactInformation");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WebApplication1.Models.Supplier", b =>
                {
                    b.HasOne("WebApplication1.Models.ContactInfomation", "ContactInformation")
                        .WithMany("Suppliers")
                        .HasForeignKey("ContactInformationId")
                        .IsRequired()
                        .HasConstraintName("FK_Supplier_ContactInfomation");

                    b.Navigation("ContactInformation");
                });

            modelBuilder.Entity("WebApplication1.Models.SupplierProduct", b =>
                {
                    b.HasOne("WebApplication1.Models.Product", "Product")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_SupplierProduct_Product");

                    b.HasOne("WebApplication1.Models.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_SupplierProduct_Supplier");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebApplication1.Models.Card", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("ClientCardServices");
                });

            modelBuilder.Entity("WebApplication1.Models.Catagory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebApplication1.Models.Check", b =>
                {
                    b.Navigation("CheckProducts");
                });

            modelBuilder.Entity("WebApplication1.Models.Client", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("ClientProducts");

                    b.Navigation("ClientServices");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("WebApplication1.Models.ContactInfomation", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Staff");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("WebApplication1.Models.Position", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("WebApplication1.Models.Product", b =>
                {
                    b.Navigation("CheckProducts");

                    b.Navigation("ClientProducts");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("WebApplication1.Models.Service", b =>
                {
                    b.Navigation("ClientCardServices");

                    b.Navigation("ClientServices");
                });

            modelBuilder.Entity("WebApplication1.Models.Staff", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("WebApplication1.Models.Supplier", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SupplierProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
